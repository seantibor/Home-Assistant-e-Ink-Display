# Example configuration entry
esphome:
  name: "epaper-display"
  platform: ESP32
  board: esp-wrover-kit

substitutions:
  friendly_name: Paper Display
  partial_update: 30s
  full_update: "30"

logger:

wifi:
  ssid: **************
  password: ************

ota:

api:

switch:
  - platform: restart
    name: "Inkplate Reboot"
    id: reboot

  - platform: gpio
    id: battery_read_mosfet
    pin:
      mcp23xxx: mcp23017_hub
      number: 9
      inverted: true

  - platform: template
    name: "Inkplate Greyscale mode"
    lambda: return id(inkplate_display).get_greyscale();
    turn_on_action:
      - lambda: id(inkplate_display).set_greyscale(true);
    turn_off_action:
      - lambda: id(inkplate_display).set_greyscale(false);

  - platform: template
    name: "Inkplate Partial Updating"
    lambda: return id(inkplate_display).get_partial_updating();
    turn_on_action:
      - lambda: id(inkplate_display).set_partial_updating(true);
    turn_off_action:
      - lambda: id(inkplate_display).set_partial_updating(false);

time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: America/New_York
    on_time:
      # Every 1 minutes
      - seconds: 0
        then:
          - component.update: inkplate_display    

sun:
  latitude: **.****
  longitude: **.****

sensor:
  - platform: adc
    id: battery_voltage
    update_interval: never
    attenuation: 11db
    pin: 35
  - platform: template
    name: "Inkplate Battery Voltage"
    device_class: "voltage"
    lambda: |-
      id(battery_read_mosfet).turn_on();
      delay(1);
      float adc = id(battery_voltage).sample();
      id(battery_read_mosfet).turn_off();
      return adc;
    filters:
      - multiply: 2
  - platform: homeassistant
    entity_id: sensor.moon
    id: moon_state
    internal: true
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    id: wifisignal
    update_interval: 60s
  - platform: homeassistant
    entity_id: sensor.power_main_panel_123_1min
    id: power_consumption_1_min
    internal: true
  - platform: homeassistant
    entity_id: sensor.power_main_panel_123_1d
    id: power_consumption_today
    internal: true
  - platform: homeassistant
    entity_id: sensor.current_uv_index
    id: uvindex
    internal: true


text_sensor:
  - platform: homeassistant
    id: moon_icon
    entity_id: sensor.moon
    internal: true
  - platform: sun
    type: sunrise
    id: sunrise_hour
    format: "%I:%M %p"
  - platform: sun
    type: sunset
    id: sunset_hour
    format: "%I:%M %p"
  - platform: homeassistant
    entity_id: sensor.fl_weather
    id: weathertoday
    internal: true
  - platform: homeassistant
    entity_id: sensor.weather_fivedays
    id: fweather
    internal: true
  - platform: homeassistant
    entity_id: sensor.temperature_rooms
    id: roomtemperature
    internal: true

  

i2c:

mcp23017:
  - id: mcp23017_hub
    address: 0x20

binary_sensor:
  - platform: status
    name: "Inkplate Status"
    id: system_status

  - platform: gpio
    name: "Inkplate Touch Pad 1"
    pin:
      mcp23xxx: mcp23017_hub
      number: 10
  - platform: gpio
    name: "Inkplate Touch Pad 2"
    pin:
      mcp23xxx: mcp23017_hub
      number: 11
  - platform: gpio
    name: "Inkplate Touch Pad 3"
    pin:
      mcp23xxx: mcp23017_hub
      number: 12
  - platform: gpio
    name: "Inkplate Wake Button"
    pin: 
      number: 36
      inverted: true
    filters:
      - delayed_on: 10ms
    on_press:
      component.update: inkplate_display

font:
  - file: 'fonts/Roboto-Medium.ttf'
    id: roboto_med_51
    size: 51

  - file: 'fonts/Roboto-Regular.ttf'
    id: roboto_reg_36
    size: 36
    
  - file: 'fonts/Roboto-Regular.ttf'
    id: roboto_reg_20
    size: 20

  - file: 'fonts/Roboto-Regular.ttf'
    id: roboto_reg_28
    size: 28
    
  - file: 'fonts/Roboto-Regular.ttf'
    id: roboto_reg_45
    size: 45

  - file: 'fonts/Roboto-Regular.ttf'
    id: roboto_reg_60
    size: 60
    glyphs:
      ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D',
       'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R',
       'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e',
       'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',
       't', 'u', 'v', 'w', 'x', 'y', 'z', 'å', 'ä', 'ö', 'à', 'è', 'ì', 'ò', 
       'ù']

  - file: 'fonts/Roboto-Bold.ttf'
    id: roboto_bold_81
    size: 81
    glyphs:
      ['&', '@', '!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z','å', 'ä', 'ö', '/','º','µ','³']

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: weather_font_240
    size: 240
    glyphs: [
      # Weather
      "\U000F0590", # mdi-weather-cloudy
      "\U000F0594", # mdi-weather-night
      "\U000F0591", # mdi-weather-fog
      "\U000F0592", # mdi-weather-hail
      "\U000F0593", # mdi-weather-lightning
      "\U000F067E", # mdi-weather-lightning-rainy
      "\U000F0595", # mdi-weather-partly-cloudy
      "\U000F0596", # mdi-weather-pouring
      "\U000F0597", # mdi-weather-rainy
      "\U000F0598", # mdi-weather-snowy
      "\U000F067F", # mdi-weather-snowy-rainy
      "\U000F0599", # mdi-weather-sunny
      "\U000F059B", # mdi-weather-sunset-down
      "\U000F059C", # mdi-weather-sunset-up
      "\U000F059D", # mdi-weather-windy
      "\U000F059E", # mdi-weather-windy-variant
      ]

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: weather_font_120
    size: 120
    glyphs: [
      # Weather
      "\U000F0590", # mdi-weather-cloudy
      "\U000F0594", # mdi-weather-night
      "\U000F0591", # mdi-weather-fog
      "\U000F0592", # mdi-weather-hail
      "\U000F0593", # mdi-weather-lightning
      "\U000F067E", # mdi-weather-lightning-rainy
      "\U000F0595", # mdi-weather-partly-cloudy
      "\U000F0596", # mdi-weather-pouring
      "\U000F0597", # mdi-weather-rainy
      "\U000F0598", # mdi-weather-snowy
      "\U000F067F", # mdi-weather-snowy-rainy
      "\U000F0599", # mdi-weather-sunny
      "\U000F059B", # mdi-weather-sunset-down
      "\U000F059C", # mdi-weather-sunset-up
      "\U000F059D", # mdi-weather-windy
      "\U000F059E", # mdi-weather-windy-variant
      ]

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: weather_font_45
    size: 45
    glyphs: [
      # Wifi
      "\U000F092F", # mdi-wifi-strength-outline
      "\U000F091F", # mdi-wifi-strength-1
      "\U000F0922", # mdi-wifi-strength-2
      "\U000F0925", # mdi-wifi-strength-3
      "\U000F0928", # mdi-wifi-strength-4
      ]

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: weather_font_75
    size: 75
    glyphs: [
      # Sun
      "\U000F059A", # mdi-weather-sunset
      # Moon
      "\U000F0F64", # mdi-moon-new
      "\U000F0F67", # mdi-moon-waxing-crescent
      "\U000F0F61", # mdi-moon-first-quarter
      "\U000F0F68", # mdi-moon-waxing-gibbous
      "\U000F0F62", # mdi-moon-full
      "\U000F0F66", # mdi-moon-waning-gibbous
      "\U000F0F63", # mdi-moon-last-quarter
      "\U000F0F65", # mdi-moon-waning-crescent
      # Rooms
      "\U000F04B9", # mdi-sofa
      "\U000F0C99", # mdi-microwave
      "\U000F0FD1", # mdi-bed-king-outline
      "\U000F106E", # mdi-bed-single-outline
      "\U000F0322", # mdi-laptop
      "\U000F07F4", # mdi-television-classic
      "\U000F06D9", # mdi-garage
      "\U000F156D", # mdi-sofa-outline
      "\U000F09A0", # mdi-shower
      "\U000F09A1", # mdi-shower-head
      "\U000F04E3", # mdi-swim
      "\U000F0599", # mdi-weather-sunny
      ]
      
color:
  - id: dark_line
    red: 0%
    green: 0%
    blue: 0%
    
graph:
  # Show bare-minimum auto-ranged graph
  - id: current_usage_graph
    duration: 1h
    width: 260
    height: 102
    traces:
      - sensor: power_consumption_1_min
        color: dark_line
  - id: uv_index_graph
    duration: 6h
    width: 260
    height: 102
    traces:
      - sensor: uvindex
        color: dark_line

display:
- platform: inkplate6
  model: inkplate_10
  id: inkplate_display
  greyscale: false
  partial_updating: true
  update_interval: $partial_update
  full_update_every: $full_update

  ckv_pin: 32
  sph_pin: 33
  gmod_pin:
    mcp23xxx: mcp23017_hub
    number: 1
  gpio0_enable_pin:
    mcp23xxx: mcp23017_hub
    number: 8
  oe_pin:
    mcp23xxx: mcp23017_hub
    number: 0
  spv_pin:
    mcp23xxx: mcp23017_hub
    number: 2
  powerup_pin:
    mcp23xxx: mcp23017_hub
    number: 4
  wakeup_pin:
    mcp23xxx: mcp23017_hub
    number: 3
  vcom_pin:
    mcp23xxx: mcp23017_hub
    number: 5

  lambda: |-
      /* SENSOR VARIABLES */
      std::string moon_info = id(moon_icon).state;
      std::string weather_days = id(fweather).state;
      std::string weather_today = id(weathertoday).state;
      std::string room_temperature = id(roomtemperature).state;
      std::string sunrise = id(sunrise_hour).state;
      std::string sunset = id(sunset_hour).state;
      float energy_instant = id(power_consumption_1_min).state;
      float energy_daily = id(power_consumption_today).state;
      float uv_index = id(uvindex).state;
      
      std::map<std::string, std::string> weather_icon_state {
          {"cloudy", "\U000F0590"},
          {"clear-day", "\U000F0599"},
          {"clear-night", "\U000F0594"},
          {"fog", "\U000F0591"},
          {"hail", "\U000F0592"},
          {"lightning", "\U000F0593"},
          {"lightning-rainy", "\U000F067E"},
          {"partlycloudy", "\U000F0595"},
          {"pouring", "\U000F0596"},
          {"rainy", "\U000F0597"},
          {"snowy", "\U000F0598"},
          {"snowy-rainy", "\U000F067F"},
          {"sunny", "\U000F0599"},
          {"sunset-down", "\U000F059B"},
          {"sunset-up", "\U000F059C"},
          {"windy", "\U000F059D"},
          {"windy-variant", "\U000F059E"}
      };

      std::map<std::string, std::string> moon_state_icon {
          {"new_moon", "\U000F0F64"},
          {"waxing_crescent", "\U000F0F67"},
          {"first_quarter", "\U000F0F61"},
          {"waxing_gibbous", "\U000F0F68"},
          {"full_moon", "\U000F0F62"},
          {"waning_gibbous", "\U000F0F66"},
          {"last_quarter", "\U000F0F63"},
          {"waning_crescent", "\U000F0F65"}
      };

      std::map<std::string, std::string> moon_state_label {
          {"new_moon", "New Moon"},
          {"waxing_crescent", "Waxing Crescent"},
          {"first_quarter", "First Quarter"},
          {"waxing_gibbous", "Waxing Gibbous"},
          {"full_moon", "Full Moon"},
          {"waning_gibbous", "Waning Gibbous"},
          {"last_quarter", "Last Quarter"},
          {"waning_crescent", "Waning Crescent"}
      };

      char delimm = ';';
      it.fill(COLOR_ON);

      /* MAIN RECTANGLE */
      it.rectangle(5, 5, 1190, 815, COLOR_OFF);
      
      /* CALENDAR RECT */
      it.filled_rectangle(10, 10, 360, 90, COLOR_OFF);
      it.rectangle(10, 10, 360, 355, COLOR_OFF);
      it.filled_rectangle(10, 370, 360, 90, COLOR_OFF);
      it.rectangle(10, 370, 360, 445, COLOR_OFF);
      
      /* DX RECT */ 
      it.rectangle(375, 10, 815, 750, COLOR_OFF);
      it.filled_rectangle(375, 765, 815, 50, COLOR_OFF);
      
      /* VERTICAL LINES */ 
      it.line(580, 10, 580, 759, COLOR_OFF);
      it.line(786, 10, 786, 759, COLOR_OFF);

      /* HORIZONTAL LINES */ 
      it.line(375, 193, 1190, 193, COLOR_OFF);
      it.line(375, 385, 1190, 385, COLOR_OFF);
      it.line(375, 578, 1190, 578, COLOR_OFF);
      
      /* WEATHER TODAY */ 
      std::size_t currentWeatherToday, previousWeatherToday = 0;
      currentWeatherToday = weather_today.find(delimm);
      
      /* Loop for the single day */
      for (int i=0; i<4; i++){
        if (i == 0) {
          // Day of the week
          it.printf(185, 75, id(roboto_reg_60), COLOR_ON, TextAlign::BASELINE_CENTER, "%s", weather_today.substr(previousWeatherToday, currentWeatherToday - previousWeatherToday).c_str());
        } else if (i == 1) {
          // Weather Icon
          it.printf(130, 325, id(weather_font_240), COLOR_OFF, TextAlign::BASELINE_CENTER, "%s", weather_icon_state[weather_today.substr(previousWeatherToday, currentWeatherToday - previousWeatherToday).c_str()].c_str());          
        } else if (i == 2){
          // Current Temp
          it.filled_circle(300, 170, 60, COLOR_OFF);
          it.circle(300, 170, 60);
          it.printf(300, 170, id(roboto_reg_45), COLOR_ON, TextAlign::CENTER, "%s", weather_today.substr(previousWeatherToday, currentWeatherToday - previousWeatherToday).c_str());
        } else if (i == 3){
          // Mont
          it.printf(185, 435, id(roboto_reg_60), COLOR_ON, TextAlign::BASELINE_CENTER, "%s", weather_today.substr(previousWeatherToday, currentWeatherToday - previousWeatherToday).c_str());
        }

        previousWeatherToday = currentWeatherToday + 1;
        currentWeatherToday = weather_today.find(delimm, previousWeatherToday);
      }
      
      /* WEATHER FORECAST */ 
      ESP_LOGD("WEATHER", "%s", weather_days.c_str());
      std::size_t currentWeather, previousWeather = 0;
      char delimWeather = '#';
      currentWeather = weather_days.find(delimWeather);
      
      int wx = 25;    // start position x 
      int wy = 472;   // start position y 

      /* Loop for the single string day */ 
      for (int i=0; i<3; i++) { 
  
        std::string forecastInfo = weather_days.substr(previousWeather, currentWeather - previousWeather).c_str();
        std::size_t currentInfo, previousInfo = 0;
        currentInfo = forecastInfo.find(delimm);
      
        /* Inner loop to get single information for each day */
        for (int j=0; j<3; j++) { 
      
          if (j == 0) {
            // Day (Mon/Tue...) 
            it.printf(wx + 126, wy + 6, id(roboto_med_51), COLOR_OFF, "%s", forecastInfo.substr(previousInfo, currentInfo - previousInfo).c_str());
          } else if (j == 1) {
            // Temperature 
            it.printf(wx + 126, wy + 60, id(roboto_reg_36), COLOR_OFF, "%s", forecastInfo.substr(previousInfo, currentInfo - previousInfo).c_str());
          } else if (j == 2) {
            // Weather Icon             
            it.printf(wx, wy, id(weather_font_120), COLOR_OFF, "%s", weather_icon_state[forecastInfo.substr(previousInfo, currentInfo - previousInfo).c_str()].c_str() );
          }
          previousInfo = currentInfo + 1;
          currentInfo = forecastInfo.find(delimm, previousInfo);
        }
        wy += 110; // move down 50 pixels and output next day 
        previousWeather = currentWeather + 1;
        currentWeather = weather_days.find(delimWeather, previousWeather);
      }

      /* TEMPERATURE */ 
      ESP_LOGD("TEMPERATURE", "%s", room_temperature.c_str());

      std::size_t currentTemperature, previousTemperature = 0;
      currentTemperature = room_temperature.find(delimm);
      
      int ttx = 400;   // start text position x 
      int tty = 170;    // start text position y
      int tlx = 400;   // start label position x
      int tly = 100;   // start label position y
      int tix = 400;   // start icon position x 
      int tiy = 20;    // start icon position y 
      int toffset = 192;

      /* Loop for the single room */
      for (int i=0; i<8; i++) { 
        if (i == 0) {
          // Garage
          it.print(tix, tiy, id(weather_font_75), COLOR_OFF, TextAlign::TOP_LEFT, "\U000F06D9");
          it.print(tlx, tly + (toffset * (i%4)), id(roboto_reg_20), COLOR_OFF, TextAlign::TOP_LEFT, "Garage");
          it.printf(ttx, tty, id(roboto_med_51), COLOR_OFF, TextAlign::BASELINE_LEFT, "%s", room_temperature.substr(previousTemperature, currentTemperature - previousTemperature).c_str());
        } else if (i == 1) {
          // Living Room
          it.print(tix, tiy + (toffset * (i%4)), id(weather_font_75), COLOR_OFF, TextAlign::TOP_LEFT, "\U000F156D");
          it.print(tlx, tly + (toffset * (i%4)), id(roboto_reg_20), COLOR_OFF, TextAlign::TOP_LEFT, "Living Room");
          it.printf(ttx, tty + (toffset * (i%4)), id(roboto_med_51), COLOR_OFF, TextAlign::BASELINE_LEFT, "%s", room_temperature.substr(previousTemperature, currentTemperature - previousTemperature).c_str());
        } else if (i == 2) {
          // Master Bedroom
          it.print(tix, tiy + (toffset * (i%4)), id(weather_font_75), COLOR_OFF, TextAlign::TOP_LEFT, "\U000F0FD1");
          it.print(tlx, tly + (toffset * (i%4)), id(roboto_reg_20), COLOR_OFF, TextAlign::TOP_LEFT, "Master Bed");
          it.printf(ttx, tty + (toffset * (i%4)), id(roboto_med_51), COLOR_OFF, TextAlign::BASELINE_LEFT, "%s", room_temperature.substr(previousTemperature, currentTemperature - previousTemperature).c_str());
        } else if (i == 3) {
          // Kaden's Room
          it.print(tix, tiy + (toffset * (i%4)) - 5, id(weather_font_75), COLOR_OFF, TextAlign::TOP_LEFT, "\U000F106E");
          it.print(tlx, tly + (toffset * (i%4)) -5, id(roboto_reg_20), COLOR_OFF, TextAlign::TOP_LEFT, "Kadens Room");
          it.printf(ttx, tty + (toffset * (i%4)) - 5, id(roboto_med_51), COLOR_OFF, TextAlign::BASELINE_LEFT, "%s", room_temperature.substr(previousTemperature, currentTemperature - previousTemperature).c_str());
        } else if (i == 4) {
          // Master Bath
          it.print(tix + toffset, tiy + (toffset * (i%4)), id(weather_font_75), COLOR_OFF, TextAlign::TOP_LEFT, "\U000F09A0");
          it.print(tlx + toffset, tly + (toffset * (i%4)), id(roboto_reg_20), COLOR_OFF, TextAlign::TOP_LEFT, "Master Bath");
          it.printf(ttx + toffset, tty, id(roboto_med_51), COLOR_OFF, TextAlign::BASELINE_LEFT, "%s", room_temperature.substr(previousTemperature, currentTemperature - previousTemperature).c_str());
        } else if (i == 5) {
          // Guest Bath
          it.print(tix + toffset, tiy + (toffset * (i%4)), id(weather_font_75), COLOR_OFF, TextAlign::TOP_LEFT, "\U000F09A1");
          it.print(tlx + toffset, tly + (toffset * (i%4)), id(roboto_reg_20), COLOR_OFF, TextAlign::TOP_LEFT, "Guest Bath");
          it.printf(ttx + toffset, tty + (toffset * (i%4)), id(roboto_med_51), COLOR_OFF, TextAlign::BASELINE_LEFT, "%s", room_temperature.substr(previousTemperature, currentTemperature - previousTemperature).c_str());
        } else if (i == 6) {
          // Pool
          it.print(tix + toffset, tiy + (toffset * (i%4)), id(weather_font_75), COLOR_OFF, TextAlign::TOP_LEFT, "\U000F04E3");
          it.print(tlx + toffset, tly + (toffset * (i%4)), id(roboto_reg_20), COLOR_OFF, TextAlign::TOP_LEFT, "Pool");
          it.printf(ttx + toffset, tty + (toffset * (i%4)), id(roboto_med_51), COLOR_OFF, TextAlign::BASELINE_LEFT, "%s", room_temperature.substr(previousTemperature, currentTemperature - previousTemperature).c_str());
        } else if (i == 7) {
          // Outdoor
          it.print(tix + toffset, tiy + (toffset * (i%4)) - 5, id(weather_font_75), COLOR_OFF, TextAlign::TOP_LEFT, "\U000F0599");
          it.print(tlx + toffset, tly + (toffset * (i%4)) - 5, id(roboto_reg_20), COLOR_OFF, TextAlign::TOP_LEFT, "Air Temp");
          it.printf(ttx + toffset, tty + (toffset * (i%4)) - 5, id(roboto_med_51), COLOR_OFF, TextAlign::BASELINE_LEFT, "%s", room_temperature.substr(previousTemperature, currentTemperature - previousTemperature).c_str());
        }

        previousTemperature = currentTemperature + 1;
        currentTemperature = room_temperature.find(delimm, previousTemperature);
      }

      /* SUNRISE SUNSET */
      ESP_LOGD("SUNRISE", "%s", sunrise.c_str());
      ESP_LOGD("SUNSET", "%s", sunset.c_str());
      it.printf(800, 20, id(weather_font_75), COLOR_OFF, TextAlign::TOP_LEFT, "%s", "\U000F059A");
      if(id(sunrise_hour).has_state() && id(sunset_hour).has_state()) {
        it.printf(910, 20, id(roboto_reg_36), COLOR_OFF, TextAlign::TOP_LEFT, "%s", sunrise.c_str());
        it.printf(910, 62, id(roboto_reg_36), COLOR_OFF, TextAlign::TOP_LEFT, "%s", sunset.c_str());
      } else {
        it.printf(910, 20, id(roboto_reg_36), COLOR_OFF, TextAlign::TOP_LEFT, "%s", "n.d.");
        it.printf(910, 62, id(roboto_reg_36), COLOR_OFF, TextAlign::TOP_LEFT, "%s", "n.d.");
      }
      
      /* MOON */
      if(id(moon_state).has_state()) {
        ESP_LOGD("MOON", "%s", moon_info.c_str());
        // Icon 
        it.printf(800, 105, id(weather_font_75), COLOR_OFF, TextAlign::TOP_LEFT, "%s", moon_state_icon[moon_info.c_str()].c_str());

        // Label 
        it.printf(910, 142, id(roboto_reg_36), COLOR_OFF, TextAlign::CENTER_LEFT, "%s", moon_state_label[moon_info.c_str()].c_str());
      };

      /* UV SENSOR DATA */ 
      it.print(800, 203, id(roboto_med_51), COLOR_OFF, TextAlign::TOP_LEFT, "UV Index");
      it.graph(800, 274, id(uv_index_graph), COLOR_OFF);
      if(id(uvindex).has_state()) {
        ESP_LOGD("UV INDEX", "%f", uv_index);
        it.printf(1065, 274, id(roboto_bold_81), COLOR_OFF, TextAlign::TOP_LEFT, "%.1f", uv_index);
      } else {
        it.printf(1065, 274, id(roboto_bold_81), COLOR_OFF, TextAlign::TOP_LEFT, "%s", "n.a.");
      }

      /* ENERGY MONITOR */ 
      it.print(800, 395, id(roboto_med_51), COLOR_OFF, TextAlign::TOP_LEFT, "Power Usage");
      if(id(power_consumption_1_min).has_state()) {
        ESP_LOGD("1M ENERGY", "%.0fW", energy_instant);
        it.print(1065, 466, id(roboto_reg_20), COLOR_OFF, TextAlign::TOP_LEFT, "Current");
        it.printf(1065, 489, id(roboto_reg_20), COLOR_OFF, TextAlign::TOP_LEFT, "%.2f kW", energy_instant / 1000);
      }
      it.graph(800, 466, id(current_usage_graph), COLOR_OFF);

      if(id(power_consumption_today).has_state()) {
        ESP_LOGD("1D ENERGY", "%.2fkWh", energy_daily);
        it.print(1065, 522, id(roboto_reg_20), COLOR_OFF, TextAlign::TOP_LEFT, "Daily");
        it.printf(1065, 545, id(roboto_reg_20), COLOR_OFF, TextAlign::TOP_LEFT, "%.1f kWh", energy_daily);
      }

      /* FOOTER */ 
      it.strftime(1075, 800 , id(roboto_reg_36), COLOR_ON, TextAlign::BASELINE_RIGHT , "Updated On: %d/%m/%Y %H:%M", id(homeassistant_time).now());

      /* WIFI SIGNAL */ 
      if(id(wifisignal).has_state()) {
        int wifi_x = 1125;
        int wifi_y = 805;
        if (id(wifisignal).state >= -50) {
          // Excellent
          it.print(wifi_x, wifi_y, id(weather_font_45), COLOR_ON, TextAlign::BASELINE_CENTER, "\U000F0928");
          ESP_LOGI("WiFi", "Exellent");
        } else if (id(wifisignal).state  >= -60) {
          // Good
          it.print(wifi_x, wifi_y, id(weather_font_45), COLOR_ON, TextAlign::BASELINE_CENTER, "\U000F0925");
          ESP_LOGI("WiFi", "Good");
        } else if (id(wifisignal).state  >= -75) {
          // Fair
          it.print(wifi_x, wifi_y, id(weather_font_45), COLOR_ON, TextAlign::BASELINE_CENTER, "\U000F0922");
          ESP_LOGI("WiFi", "Fair");
        } else if (id(wifisignal).state  >= -100) {
          // Weak
          it.print(wifi_x, wifi_y, id(weather_font_45), COLOR_ON, TextAlign::BASELINE_CENTER, "\U000F091F");
          ESP_LOGI("WiFi", "Weak");
        } else {
          // Unlikely working signal
          it.print(wifi_x, wifi_y, id(weather_font_45), COLOR_ON, TextAlign::BASELINE_CENTER, "\U000F092F");
          ESP_LOGI("WiFi", "Unlikely");
        }
      }
